
#**********************************************************************************************************************
# This is a geo-cli handler file. It is automatically executed from cli-handlers.sh when geo-cli is loaded into each 
# new terminal.
# 
# All of the exported constants and functions available to geo-cli are available here.
#**********************************************************************************************************************

#######################################################################################################################
# Global Constants and Functions
#######################################################################################################################
# [Path Constants]  
# GEO_CLI_DIR         The full path to the geo-cli repo.
# GEO_CLI_SRC_DIR     The full path to the geo-cli src dir, located in the root of the repo (geo-cli/src).
# GEO_CLI_CONFIG_DIR  The full path to the geo-cli config dir, located at $HOME/.geo-cli.
#   => This directory is used any time geo-cli or its commands need to persist some kind of information. If a command
#        needs to store data in this directory, create a new directory the same name as the command located at
#          $GEO_CLI_CONFIG_DIR/data/<command_name>.
# GEO_CLI_CONF_FILE   The full path to the geo-cli config file, located at $HOME/.geo-cli/.geo.conf.
#   => This file effectively acts as the db for geo, it stores all configurations and user preferences. It is written
#        to automically using lock a lock file.
# [Log Functions]
# All log functions are prefixed with log:: and are defined in src/utils/log.sh. Try the functions yourself or search
# for usages for use cases.
#   log::caution                log::hint
#   log::filepath               log::fmt_text_and_indent_after_first_line
#   log::keyvalue               log::prompt_n
#   log::txt_italic             log::txt_blink
#   log::code                   log::yellow
#   log::fmt_text               log::detail
#   log::link                   log::purple
#   log::stacktrace             log::txt_bold
#   log::txt_underline          log::Error
#   log::cyan                   log::red
#   log::status                 log::txt_dim
#   log::verbose                log::error
#   log::data                   log::repeat_str
#   log::strip_color_codes      log::txt_hide
#   log::warn                   log::file
#   log::data_header            log::info
#   log::green                  log::txt_invert
#   log::white                  log::prompt                 
#   log::debug                  log::success                    
  
#######################################################################################################################
#### Create a new command (e.g. 'geo <some_new_command>')
#######################################################################################################################
## First argument commands
#----------------------------------------------------------
# Each command definition requires three parts for it to be available as a command to geo-cli (i.e. 'db' is the command in 'geo db'):
#   1. Its name is added to the COMMANDS array
#        - This array lets geo check if a command exists. If geo is run with an unknown command, an error message will
#          shown to the user.
#   2. Command documentation function (for printing help)
#        - This function is run when the user requests help via 'geo <command> --help'. Also, these functions are called
#           for every command in the COMMANDS array when the user runs 'geo help' or 'geo -h'.
#   3. Command function
#       - The actual command that gets executed when the user runs 'geo <your_command>'. All the arguments passed to 
#           geo following the command name will be passed to this function as positional arguments (e.g.. $1, $2, ...).
# 
# The three parts above have the following structure:
#   COMMAND+=('command')
#   geo-command_doc() {...}
#   geo-command() {...}
# Example for the definition of 'geo db' command:
#   COMMAND+=('db')
#   geo-db_doc() {...}
#   geo-db() {...}
#
## Start off a new command definition by making a copy of the template above and fill in your own logic. 
# Some example documentation functions are also included in the template. They take care of formatting/colouring the
# text when printing it out for the user. Replace the example documentation with your own.
#------------------------------------------------------------
# Template:
#######################################################################################################################
# COMMANDS+=('command')
# geo-command_doc() {
#   doc_cmd 'command'
#       doc_cmd_desc 'Commands description.'
#       
#       doc_cmd_sub_cmds_title
#       
#       doc_cmd_sub_cmd 'start [options] <name>'
#           doc_cmd_sub_cmd_desc 'Creates a versioned db container and...'
#           doc_cmd_sub_options_title
#               doc_cmd_sub_option '-y'
#                   doc_cmd_sub_option_desc 'Accept all prompts.'
#               doc_cmd_sub_option '-d <database name>'
#                   doc_cmd_sub_option_desc 'Sets the name of the db to...'
# 
#       doc_cmd_examples_title
#           doc_cmd_example 'geo db start 11.0'
#           doc_cmd_example 'geo db start -y 11.0'
# }
# geo-command() {
#
# }
#######################################################################################################################
# 
# Also, add a section to the README with instructions on how to use your command.